{
  "arrays": [
    {
      "id": "a1",
      "title": "Find Maximum Number",
      "statement": "Given an array of numbers, return the maximum number.",
      "input": "[1, 5, 2, 9, 3, 12, 7]",
      "output": "12"
    },
    {
      "id": "a2",
      "title": "Sum of Array",
      "statement": "Given an array of numbers, return the sum of all elements.",
      "input": "[2, 4, 6, 8, 10]",
      "output": "30"
    },
    {
      "id": "a3",
      "title": "Find Second Largest Number",
      "statement": "Given an array of numbers, return the second largest number.",
      "input": "[10, 5, 8, 20, 15, 22, 19]",
      "output": "20"
    },
    {
      "id": "a4",
      "title": "Remove Duplicates from Sorted Array",
      "statement": "Given a sorted array, remove duplicates in-place such that each element appears only once.",
      "input": "[1, 1, 2, 2, 3, 4, 4, 5]",
      "output": "[1, 2, 3, 4, 5]"
    },
    {
      "id": "a5",
      "title": "Rotate Array",
      "statement": "Rotate the given array to the right by k steps, where k is a non-negative integer.",
      "input": "Array: [1, 2, 3, 4, 5], k: 2",
      "output": "[4, 5, 1, 2, 3]"
    },
    {
      "id": "a6",
      "title": "Find Missing Number",
      "statement": "Given an array containing n distinct numbers taken from 0, 1, 2, ..., n, find the single missing number.",
      "input": "[3, 0, 1]",
      "output": "2"
    },
    {
      "id": "a7",
      "title": "Two Sum",
      "statement": "Given an array of integers and a target sum, return the indices of the two numbers that add up to the target.",
      "input": "nums: [2, 7, 11, 15], target: 9",
      "output": "[0, 1]"
    },
    {
      "id": "a8",
      "title": "Find All Duplicates in an Array",
      "statement": "Given an array of integers, where 1 <= a[i] <= n, find all the elements that appear twice.",
      "input": "[4, 3, 2, 7, 8, 2, 3, 1]",
      "output": "[2, 3]"
    },
    {
      "id": "a9",
      "title": "Merge Sorted Arrays",
      "statement": "Given two sorted arrays, merge them into a single sorted array.",
      "input": "nums1: [1, 3, 5], nums2: [2, 4, 6]",
      "output": "[1, 2, 3, 4, 5, 6]"
    },
    {
      "id": "a10",
      "title": "Find Pivot Index",
      "statement": "Given an array of integers, find the pivot index where the sum of numbers to the left of the index is equal to the sum of numbers to the right.",
      "input": "[1, 7, 3, 6, 5, 6]",
      "output": "3"
    }
  ],
  "linkedlist": [
    {
      "id": "l1",
      "title": "Count Nodes",
      "statement": "Given a linked list, return the number of nodes.",
      "input": "1 -> 2 -> 3 -> 4 -> null",
      "output": "4"
    },
    {
      "id": "l2",
      "title": "Find Middle Node",
      "statement": "Given a linked list, find the middle node.",
      "input": "1 -> 2 -> 3 -> 4 -> 5 -> null",
      "output": "3"
    },
    {
      "id": "l3",
      "title": "Reverse a Linked List",
      "statement": "Reverse a singly linked list and return the head of the new list.",
      "input": "1 -> 2 -> 3 -> 4 -> null",
      "output": "4 -> 3 -> 2 -> 1 -> null"
    },
    {
      "id": "l4",
      "title": "Detect Cycle",
      "statement": "Given a linked list, determine if it has a cycle in it.",
      "input": "List: 1 -> 2 -> 3 -> 4 -> 2 (cycle)",
      "output": "true"
    },
    {
      "id": "l5",
      "title": "Merge Two Sorted Lists",
      "statement": "Merge two sorted linked lists and return it as a new sorted list.",
      "input": "List 1: 1 -> 3 -> 5, List 2: 2 -> 4 -> 6",
      "output": "1 -> 2 -> 3 -> 4 -> 5 -> 6"
    },
    {
      "id": "l6",
      "title": "Remove Nth Node From End of List",
      "statement": "Remove the n-th node from the end of the list and return its head.",
      "input": "List: 1 -> 2 -> 3 -> 4 -> 5, n: 2",
      "output": "1 -> 2 -> 3 -> 5"
    },
    {
      "id": "l7",
      "title": "Palindrome Linked List",
      "statement": "Given a singly linked list, determine if it is a palindrome.",
      "input": "1 -> 2 -> 2 -> 1 -> null",
      "output": "true"
    },
    {
      "id": "l8",
      "title": "Intersection of Two Linked Lists",
      "statement": "Find the node at which the intersection of two singly linked lists begins.",
      "input": "List A: 4->1->8->4->5, List B: 5->6->1->8->4->5. Intersection starts at node 8.",
      "output": "8"
    },
    {
      "id": "l9",
      "title": "Remove Duplicates from Sorted List",
      "statement": "Given a sorted linked list, delete all duplicates such that each element appears only once.",
      "input": "1 -> 1 -> 2 -> 3 -> 3 -> null",
      "output": "1 -> 2 -> 3"
    },
    {
      "id": "l10",
      "title": "Reverse Linked List II",
      "statement": "Reverse a linked list from position m to n.",
      "input": "1 -> 2 -> 3 -> 4 -> 5, m=2, n=4",
      "output": "1 -> 4 -> 3 -> 2 -> 5"
    }
  ],
  "strings": [
    {
      "id": "s1",
      "title": "Reverse a String",
      "statement": "Reverse the given string.",
      "input": "Hello",
      "output": "olleH"
    },
    {
      "id": "s2",
      "title": "Check for Palindrome",
      "statement": "Given a string, determine if it is a palindrome, ignoring cases and non-alphanumeric characters.",
      "input": "A man, a plan, a canal: Panama",
      "output": "true"
    },
    {
      "id": "s3",
      "title": "Count Vowels",
      "statement": "Count the number of vowels (a, e, i, o, u) in a given string.",
      "input": "programming",
      "output": "3"
    },
    {
      "id": "s4",
      "title": "Longest Common Prefix",
      "statement": "Find the longest common prefix string amongst an array of strings.",
      "input": "['flower', 'flow', 'flight']",
      "output": "fl"
    },
    {
      "id": "s5",
      "title": "Valid Parentheses",
      "statement": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
      "input": "()[]{}",
      "output": "true"
    },
    {
      "id": "s6",
      "title": "First Unique Character in a String",
      "statement": "Find the first non-repeating character in a string and return its index.",
      "input": "loveleetcode",
      "output": "2"
    },
    {
      "id": "s7",
      "title": "Valid Anagram",
      "statement": "Given two strings s and t, determine if t is an anagram of s.",
      "input": "s: 'anagram', t: 'nagaram'",
      "output": "true"
    },
    {
      "id": "s8",
      "title": "Reverse Words in a String",
      "statement": "Given an input string, reverse the order of the words.",
      "input": "the sky is blue",
      "output": "blue is sky the"
    },
    {
      "id": "s9",
      "title": "Implement strStr()",
      "statement": "Return the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.",
      "input": "haystack: 'hello', needle: 'll'",
      "output": "2"
    },
    {
      "id": "s10",
      "title": "Longest Substring Without Repeating Characters",
      "statement": "Find the length of the longest substring without repeating characters.",
      "input": "abcabcbb",
      "output": "3"
    }
  ],
  "trees": [
    {
      "id": "t1",
      "title": "Count Tree Nodes",
      "statement": "Count the total number of nodes in a binary tree.",
      "input": "Root of a tree with 5 nodes",
      "output": "5"
    },
    {
      "id": "t2",
      "title": "Find Tree Height",
      "statement": "Find the maximum height of a binary tree.",
      "input": "Root of a tree with height 3",
      "output": "3"
    },
    {
      "id": "t3",
      "title": "Preorder Traversal",
      "statement": "Perform a preorder traversal of a binary tree.",
      "input": "Tree: root(1), left(2), right(3)",
      "output": "[1, 2, 3]"
    },
    {
      "id": "t4",
      "title": "Inorder Traversal",
      "statement": "Perform an inorder traversal of a binary tree.",
      "input": "Tree: root(3), left(2), right(4)",
      "output": "[2, 3, 4]"
    },
    {
      "id": "t5",
      "title": "Postorder Traversal",
      "statement": "Perform a postorder traversal of a binary tree.",
      "input": "Tree: root(3), left(2), right(4)",
      "output": "[2, 4, 3]"
    },
    {
      "id": "t6",
      "title": "Symmetric Tree",
      "statement": "Given a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).",
      "input": "Tree: 1, 2(L), 2(R), 3(LL), 4(LR), 4(RL), 3(RR)",
      "output": "true"
    },
    {
      "id": "t7",
      "title": "Maximum Depth of Binary Tree",
      "statement": "Find the maximum depth (height) of a binary tree.",
      "input": "Root of a tree with depth 3",
      "output": "3"
    },
    {
      "id": "t8",
      "title": "Validate Binary Search Tree",
      "statement": "Given a binary tree, determine if it is a valid binary search tree (BST).",
      "input": "Tree: 5, 1(L), 4(R), 3(RL), 6(RR)",
      "output": "false"
    },
    {
      "id": "t9",
      "title": "Same Tree",
      "statement": "Given two binary trees, write a function to check if they are the same.",
      "input": "Tree 1: [1,2,3], Tree 2: [1,2,3]",
      "output": "true"
    },
    {
      "id": "t10",
      "title": "Invert Binary Tree",
      "statement": "Invert a binary tree.",
      "input": "Tree: [4,2,7,1,3,6,9]",
      "output": "[4,7,2,9,6,3,1]"
    }
  ],
  "stacks": [
    {
      "id": "st1",
      "title": "Valid Parentheses",
      "statement": "Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.",
      "input": "()[]{}",
      "output": "true"
    },
    {
      "id": "st2",
      "title": "Implement a Queue using Stacks",
      "statement": "Implement a first-in, first-out (FIFO) queue using only two stacks.",
      "input": "push(1), push(2), peek(), pop()",
      "output": "1"
    },
    {
      "id": "st3",
      "title": "Min Stack",
      "statement": "Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.",
      "input": "push(-2), push(0), push(-3), getMin(), pop(), top(), getMin()",
      "output": "-3, 0, -2"
    },
    {
      "id": "st4",
      "title": "Daily Temperatures",
      "statement": "Given an array of temperatures, return an array where each element is the number of days you have to wait to get a warmer temperature.",
      "input": "[73, 74, 75, 71, 69, 72, 76, 73]",
      "output": "[1, 1, 4, 2, 1, 1, 0, 0]"
    },
    {
      "id": "st5",
      "title": "Evaluate Reverse Polish Notation",
      "statement": "Evaluate the value of an arithmetic expression in Reverse Polish Notation.",
      "input": "['2', '1', '+', '3', '*']",
      "output": "9"
    },
    {
      "id": "st6",
      "title": "Simplify Path",
      "statement": "Given a string path, return the simplified canonical path.",
      "input": "/home//foo/",
      "output": "/home/foo"
    },
    {
      "id": "st7",
      "title": "Longest Valid Parentheses",
      "statement": "Given a string containing just '(' and ')', find the length of the longest valid (well-formed) parentheses substring.",
      "input": "(()",
      "output": "2"
    },
    {
      "id": "st8",
      "title": "Largest Rectangle in Histogram",
      "statement": "Find the area of the largest rectangle in a histogram.",
      "input": "[2, 1, 5, 6, 2, 3]",
      "output": "10"
    },
    {
      "id": "st9",
      "title": "Decode String",
      "statement": "Given an encoded string, return its decoded string.",
      "input": "3[a]2[bc]",
      "output": "aaabcbc"
    },
    {
      "id": "st10",
      "title": "Backspace String Compare",
      "statement": "Given two strings s and t, return true if they are equal when both are typed into empty text editors. '#' means a backspace character.",
      "input": "s: 'ab#c', t: 'ad#c'",
      "output": "true"
    }
  ],
  "queues": [
    {
      "id": "q1",
      "title": "Implement a Stack using Queues",
      "statement": "Implement a last-in, first-out (LIFO) stack using only two queues.",
      "input": "push(1), push(2), top(), pop()",
      "output": "2"
    },
    {
      "id": "q2",
      "title": "First Unique Character in a Stream",
      "statement": "Find the first non-repeating character in a stream of characters.",
      "input": "aabc",
      "output": "b"
    },
    {
      "id": "q3",
      "title": "Number of Islands",
      "statement": "Given a 2D grid of '1's (land) and '0's (water), count the number of islands.",
      "input": "Grid: [['1','1','0','0'],['1','0','0','0'],['0','0','1','0']]",
      "output": "2"
    },
    {
      "id": "q4",
      "title": "Walls and Gates",
      "statement": "Fill an m x n 2D grid containing walls (-1), gates (0), and empty rooms (INF). Fill each empty room with the distance to its nearest gate.",
      "input": "INF, -1, 0, INF | INF, INF, INF, -1 | INF, -1, INF, -1 | 0, -1, INF, INF",
      "output": "3, -1, 0, 1 | 2, 2, 1, -1 | 1, -1, 2, -1 | 0, -1, 3, 4"
    },
    {
      "id": "q5",
      "title": "Binary Tree Level Order Traversal",
      "statement": "Given the root of a binary tree, return the level order traversal of its nodes' values.",
      "input": "Tree: [3,9,20,null,null,15,7]",
      "output": "[[3], [9, 20], [15, 7]]"
    },
    {
      "id": "q6",
      "title": "Find the Kth Largest Element",
      "statement": "Find the kth largest element in an array.",
      "input": "nums: [3,2,1,5,6,4], k=2",
      "output": "5"
    },
    {
      "id": "q7",
      "title": "Shortest Path in Binary Matrix",
      "statement": "Find the length of the shortest path from the top-left to the bottom-right cell in a binary matrix.",
      "input": "Grid: [[0,1],[1,0]]",
      "output": "2"
    },
    {
      "id": "q8",
      "title": "Rotten Oranges",
      "statement": "Given a grid of oranges, where 0 is empty, 1 is fresh, and 2 is rotten. Every minute, any fresh orange that is adjacent to a rotten orange becomes rotten. Return the minimum number of minutes that must elapse until no fresh oranges remain.",
      "input": "Grid: [[2,1,1],[1,1,0],[0,1,1]]",
      "output": "4"
    },
    {
      "id": "q9",
      "title": "Implement Circular Queue",
      "statement": "Design a circular queue and implement the provided operations.",
      "input": "MyCircularQueue(3), enQueue(1), enQueue(2), enQueue(3), enQueue(4), Rear(), isFull(), deQueue(), enQueue(4), Rear()",
      "output": "3, true, true, 4"
    },
    {
      "id": "q10",
      "title": "Course Schedule",
      "statement": "There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai. Return true if you can finish all courses.",
      "input": "numCourses: 2, prerequisites: [[1,0]]",
      "output": "true"
    }
  ],
  "hashtables": [
    {
      "id": "h1",
      "title": "Two Sum",
      "statement": "Given an array of integers and an integer target, return indices of the two numbers such that they add up to target.",
      "input": "nums: [2, 7, 11, 15], target: 9",
      "output": "[0, 1]"
    },
    {
      "id": "h2",
      "title": "First Unique Character in a String",
      "statement": "Find the first non-repeating character in a string and return its index.",
      "input": "loveleetcode",
      "output": "2"
    },
    {
      "id": "h3",
      "title": "Count Character Frequencies",
      "statement": "Count the frequency of each character in a given string.",
      "input": "hello world",
      "output": "h:1, e:1, l:3, o:2, ' ':1, w:1, r:1, d:1"
    },
    {
      "id": "h4",
      "title": "Group Anagrams",
      "statement": "Given an array of strings, group anagrams together.",
      "input": "['eat', 'tea', 'tan', 'ate', 'nat', 'bat']",
      "output": "[['eat', 'tea', 'ate'], ['tan', 'nat'], ['bat']]"
    },
    {
      "id": "h5",
      "title": "Valid Sudoku",
      "statement": "Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated.",
      "input": "Grid representation of a valid Sudoku board",
      "output": "true"
    },
    {
      "id": "h6",
      "title": "Intersection of Two Arrays",
      "statement": "Given two arrays, write a function to compute their intersection.",
      "input": "nums1: [4,9,5], nums2: [9,4,9,8,4]",
      "output": "[9, 4]"
    },
    {
      "id": "h7",
      "title": "Contains Duplicate",
      "statement": "Given an array of integers, find if the array contains any duplicates.",
      "input": "[1, 2, 3, 1]",
      "output": "true"
    },
    {
      "id": "h8",
      "title": "Longest Consecutive Sequence",
      "statement": "Find the length of the longest consecutive elements sequence.",
      "input": "[100, 4, 200, 1, 3, 2]",
      "output": "4"
    },
    {
      "id": "h9",
      "title": "Subarray Sum Equals K",
      "statement": "Given an array of integers and an integer k, return the total number of continuous subarrays whose sum equals to k.",
      "input": "nums: [1,1,1], k: 2",
      "output": "2"
    },
    {
      "id": "h10",
      "title": "Isomorphic Strings",
      "statement": "Given two strings s and t, determine if they are isomorphic. Two strings are isomorphic if the characters in s can be replaced to get t.",
      "input": "s: 'egg', t: 'add'",
      "output": "true"
    }
  ],
  "graphs": [
    {
      "id": "g1",
      "title": "Breadth-First Search (BFS)",
      "statement": "Perform a BFS traversal on a graph starting from a given node.",
      "input": "Graph: A -> B, A -> C, B -> D, C -> E. Start: A",
      "output": "A, B, C, D, E"
    },
    {
      "id": "g2",
      "title": "Depth-First Search (DFS)",
      "statement": "Perform a DFS traversal on a graph starting from a given node.",
      "input": "Graph: A -> B, A -> C, B -> D, C -> E. Start: A",
      "output": "A, B, D, C, E"
    },
    {
      "id": "g3",
      "title": "Clone Graph",
      "statement": "Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph.",
      "input": "Graph: 1 -- 2, 1 -- 4, 2 -- 3, 3 -- 4",
      "output": "A new, identical graph"
    },
    {
      "id": "g4",
      "title": "Number of Islands",
      "statement": "Given a 2D grid of '1's (land) and '0's (water), count the number of islands.",
      "input": "Grid: [['1','1','0','0'],['1','0','0','0'],['0','0','1','0']]",
      "output": "2"
    },
    {
      "id": "g5",
      "title": "Pacific Atlantic Water Flow",
      "statement": "Given an m x n matrix of integers, find the list of grid coordinates where water can flow to both the Pacific and Atlantic oceans.",
      "input": "Matrix: [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]",
      "output": "[[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]"
    },
    {
      "id": "g6",
      "title": "Course Schedule",
      "statement": "Return true if you can finish all courses, given prerequisites.",
      "input": "numCourses: 2, prerequisites: [[1,0]]",
      "output": "true"
    },
    {
      "id": "g7",
      "title": "Graph Valid Tree",
      "statement": "Given n nodes labeled from 0 to n-1 and a list of undirected edges, write a function to check whether these edges make up a valid tree.",
      "input": "n: 5, edges: [[0,1],[0,2],[0,3],[1,4]]",
      "output": "true"
    },
    {
      "id": "g8",
      "title": "Is Graph Bipartite?",
      "statement": "Given a graph, return true if and only if it is bipartite.",
      "input": "Graph: [[1,3],[0,2],[1,3],[0,2]]",
      "output": "true"
    },
    {
      "id": "g9",
      "title": "Word Ladder",
      "statement": "Given two words, beginWord and endWord, and a dictionary's word list, find the length of the shortest transformation sequence from beginWord to endWord.",
      "input": "beginWord: 'hit', endWord: 'cog', wordList: ['hot','dot','dog','lot','log','cog']",
      "output": "5"
    },
    {
      "id": "g10",
      "title": "Find the Town Judge",
      "statement": "In a town, there is a secret town judge. The judge trusts nobody, and everybody else (except the judge) trusts the judge. You are given the number of people and a list of trust relationships. Return the label of the town judge.",
      "input": "N: 3, trust: [[1,3],[2,3]]",
      "output": "3"
    }
  ]
}